{"version":3,"sources":["Map.js","serviceWorker.js","index.js"],"names":["Map","ReactMapboxGl","accessToken","Mapa","props","state","lat","long","counter","center","this","interval2","setInterval","setState","interval","fetch","then","data","json","latitud","longitud","clearInterval","className","style","textAlign","position","zIndex","zoom","containerStyle","height","width","top","left","transform","border","marginBottom","renderChildrenInPortal","type","id","layout","key","coordinates","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAGMA,EAAMC,YAAc,CACxBC,YAAa,iGAsFAC,E,YA1Ef,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KARNC,MAAM,CACJC,IAAI,KACJC,KAAK,KACLC,QAAS,EACTC,OAAO,IAGO,E,iFAKE,IAAD,OAEjBC,KAAKC,UAAYC,YAAY,WAC3B,EAAKC,SAAS,CACZL,QAAS,EAAKH,MAAMG,QAAQ,KAE9B,MAEFE,KAAKI,SAAWF,YAAY,WAC1BG,MAAM,0CACLC,KAAK,SAACC,GACL,OAAOA,EAAKC,SACXF,KAAM,SAAAC,GAEP,EAAKJ,SAAS,CACZP,IAAIW,EAAKA,KAAKE,QACdZ,KAAKU,EAAKA,KAAKG,cAIlB,O,6CAIHC,cAAcX,KAAKI,UACnBO,cAAcX,KAAKC,a,+BAMnB,OACE,yBAAKW,UAAU,MAAMC,MAAO,CAACC,UAAU,WAGlCd,KAAKL,MAAMC,IACV,6BACE,wBAAIiB,MAAO,CAACE,SAAS,WAAWC,OAAO,MAAvC,yBACF,kBAAC1B,EAAD,CACEuB,MAAM,oCACNI,KAAM,CAAC,IACPlB,OAAQ,CAACC,KAAKL,MAAME,KAAKG,KAAKL,MAAMC,KACpCsB,eAAgB,CACdC,OAAQ,OACRC,MAAO,OACPL,SAAU,WACVM,IAAK,MACLC,KAAM,MACNC,UAAW,uBACXC,OAAQ,iBACRC,aAAa,QAEfC,wBAAwB,GACpB,kBAAC,IAAD,CACEC,KAAK,SACLC,GAAG,SACHC,OAAQ,CAAE,aAAc,YAAa,YAAY,GACjDC,IAAK9B,KAAKL,MAAMG,SAChB,kBAAC,IAAD,CAASiC,YAAa,CAAC/B,KAAKL,MAAME,KAAKG,KAAKL,MAAMC,UAIxD,qB,GA5EOoC,aCKCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.7458ec99.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\n\nconst Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoiY2hyaXNmdDI1IiwiYSI6ImNqemxheXBpaTB0bXczY2s2MG5rM3BrZzgifQ.IJuNpj8FMzhcaHNXSeJM8w\",\n});\n\nclass Mapa extends Component {\n\n  state={\n    lat:null,\n    long:null,\n    counter: 0,\n    center:[]\n  }\n\nconstructor(props){\n  super(props);\n  \n}\n\ncomponentDidMount(){\n\n  this.interval2 = setInterval(()=>{\n    this.setState({\n      counter: this.state.counter+1\n    })\n  },1200);\n\n  this.interval = setInterval(() => {\n    fetch('http://67.205.188.226:3000/coordenadas')\n    .then((data)=>{\n      return data.json()\n    }).then((data =>{\n\n      this.setState({\n        lat:data.data.latitud,\n        long:data.data.longitud,\n      })\n    }))\n    \n  }, 1000);\n  }\n\ncomponentWillUnmount() {\n  clearInterval(this.interval);\n  clearInterval(this.interval2);\n}\n\n\n  render(){\n\n  return (\n    <div className=\"App\" style={{textAlign:\"center\"}}>\n      {\n        \n        (this.state.lat) ? (\n          <div>\n            <h1 style={{position:\"relative\",zIndex:\"2\"}}>BASTÃ“N INTELIGENTE</h1>\n          <Map\n            style=\"mapbox://styles/mapbox/streets-v9\"\n            zoom={[16]}\n            center={[this.state.long,this.state.lat]}\n            containerStyle={{\n              height: \"90vh\",\n              width: \"90vw\",\n              position: \"absolute\",\n              top: \"55%\",\n              left: \"50%\",\n              transform: \"translate(-50%,-50%)\",\n              border: \"20px solid red\",\n              marginBottom:\"10px\"\n            }}\n            renderChildrenInPortal={true}>\n                <Layer\n                  type=\"symbol\"\n                  id=\"marker\"\n                  layout={{ \"icon-image\": \"marker-15\", \"icon-size\":2 }}\n                  key={this.state.counter}>\n                  <Feature coordinates={[this.state.long,this.state.lat]}/>\n                </Layer>\n            </Map>  \n                  </div>\n        ) : 'Cargando data'\n      }\n    </div>\n  );\n}\n}\n\nexport default Mapa\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from './Map'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Map />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}